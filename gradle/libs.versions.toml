[versions]
# Accompanist
accompanist = "0.32.0"
# Android
material = "1.6.1"
# AndroidX
androidx-activity = "1.8.0"
androidx-annotation = "1.7.0"
androidx-appCompat = "1.6.1"
androidx-biometric = "1.2.0-alpha05"
androidx-compose = "1.7.5"
androidx-compose-constraintlayout = "1.1.0"
androidx-compose-foundation = "1.7.5"
androidx-compose-material = "1.7.5"
androidx-compose-material3 = "1.3.1"
androidx-core = "1.12.0"
androidx-datastore = "1.1.1"
androidx-exif = "1.3.6"
androidx-hilt = "1.2.0"
androidx-hilt-navigation-compose = "1.2.0"
androidx-lifecycle = "2.6.2"
androidx-media3 = "1.2.1"
androidx-navigation = "2.7.7"
androidx-paging = "3.1.1"
androidx-paging-compose = "3.2.1"
androidx-room = "2.7.2"
androidx-test = "1.5.0"
androidx-test-orchestrator = "1.4.2"
androidx-test-uiautomator = "2.2.0"
androidx-test-util = "1.4.2"
androidx-webkit = "1.14.0"
androidx-window = "1.4.0"
androidx-work = "2.10.0"
# Android tools
android-tools = "1.1.5"
# Coil
coil = "2.4.0"
# Core
core = "35.0.0"
core-test-quark = "14.1.0"
# Dagger
dagger = "2.53.1"
# Desugar
desugar = "2.0.4"
# Github
treessence = "1.0.5"
lottie = "6.6.6"
# Google Play
google-play-review = "2.0.1"
# Gradle
android-gradle-plugin = "8.9.1"
proton-detekt-plugin = "1.3.0"
paparazzi-gradle-plugin = "1.3.4"
# JaCoCo
jaCoCo = "0.8.8"
# JakeWharton
timber = "5.0.1"
# Kotlin
kotlin = "2.0.21"
coroutines = "1.8.0"
serializationJson = "1.6.3"
# Sentry
sentry = "7.21.0"
# Showkase
showkase = "1.0.3"
# Squareup
leakCanary = "2.8.1"
okhttp = "4.10.0"
retrofit = "2.9.0"
# Test
junit = "4.13.2"
mockk = "1.13.9"
mockwebserver = "4.10.0"
robolectric = "4.15.1"
fusion = "0.9.97"
espresso-contrib = "3.5.0"
testParameterInjector = "1.10"

[libraries]
# Gradle
gradle-plugin-android = { module = "com.android.tools.build:gradle", version.ref = "android-gradle-plugin" }
gradle-plugin-kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
gradle-plugin-hilt-android = { module = "com.google.dagger:hilt-android-gradle-plugin", version.ref = "dagger" }
gradle-plugin-jaCoCo = { module = "org.jacoco:org.jacoco.core", version.ref = "jaCoCo" }
gradle-plugin-kotlin-serialization = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin" }
gradle-plugin-compose-compiler = { module = "org.jetbrains.kotlin:compose-compiler-gradle-plugin", version.ref = "kotlin" }

# Android tools
desugar-jdk-libs = { module = "com.android.tools:desugar_jdk_libs", version.ref = "android-tools" }

# Accompanist
accompanist-systemUiController = { module = "com.google.accompanist:accompanist-systemuicontroller", version.ref = "accompanist" }
accompanist-permissions = { module = "com.google.accompanist:accompanist-permissions", version.ref = "accompanist" }
accompanist-drawablepainter = { module = "com.google.accompanist:accompanist-drawablepainter", version.ref = "accompanist" }
accompanist-placeholderMaterial = { module = "com.google.accompanist:accompanist-placeholder-material", version.ref = "accompanist" }

# AndroidX
## Activity
androidx-activity-ktx = { module = "androidx.activity:activity-ktx", version.ref = "androidx-activity" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activity" }
## Biometric
androidx-biometric = { module = "androidx.biometric:biometric", version.ref = "androidx-biometric" }
androidx-biometric-ktx = { module = "androidx.biometric:biometric-ktx", version.ref = "androidx-biometric" }
## Compose
androidx-compose-constraintlayout = { module = "androidx.constraintlayout:constraintlayout-compose", version.ref = "androidx-compose-constraintlayout" }
androidx-compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "androidx-compose-foundation" }
androidx-compose-foundationLayout = { module = "androidx.compose.foundation:foundation-layout", version.ref = "androidx-compose-foundation" }
androidx-compose-material = { module = "androidx.compose.material:material", version.ref = "androidx-compose-material" }
androidx-compose-material3 = { module = "androidx.compose.material3:material3", version.ref = "androidx-compose-material3" }
androidx-compose-runtime = { module = "androidx.compose.runtime:runtime", version.ref = "androidx-compose" }
androidx-compose-ui = { module = "androidx.compose.ui:ui", version.ref = "androidx-compose" }
androidx-compose-uiTooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "androidx-compose" }
androidx-compose-uiTestManifest = { module = "androidx.compose.ui:ui-test-manifest", version.ref = "androidx-compose" }
## Core
androidx-core-annotation = { module = "androidx.annotation:annotation", version.ref = "androidx-annotation" }
androidx-core-appCompat = { module = "androidx.appcompat:appcompat", version.ref = "androidx-appCompat" }
androidx-core-core = { module = "androidx.core:core", version.ref = "androidx-core" }
androidx-core-core-ktx = { module = "androidx.core:core-ktx", version.ref = "androidx-core" }
## DataStore
androidx-dataStore-core = { module = "androidx.datastore:datastore", version.ref = "androidx-datastore" }
androidx-dataStore-preferences = { module = "androidx.datastore:datastore-preferences", version.ref = "androidx-datastore" }
# ExifInterface
androidx-exif = { module = "androidx.exifinterface:exifinterface", version.ref = "androidx-exif" }
# Google play
google-play-review = { module = "com.google.android.play:review-ktx", version.ref = "google-play-review" }
## Hilt
androidx-hilt-compiler = { module = "androidx.hilt:hilt-compiler", version.ref = "androidx-hilt" }
androidx-hilt-work = { module = "androidx.hilt:hilt-work", version.ref = "androidx-hilt" }
androidx-hilt-navigation-compose = { module = "androidx.hilt:hilt-navigation-compose", version.ref = "androidx-hilt-navigation-compose" }
## Lifecycle
androidx-lifecycle-runtime-ktx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "androidx-lifecycle" }
androidx-lifecycle-livedata-ktx = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "androidx-lifecycle" }
## Media3
androidx-media3-exoplayer = { module = "androidx.media3:media3-exoplayer", version.ref = "androidx-media3" }
androidx-media3-ui = { module = "androidx.media3:media3-ui", version.ref = "androidx-media3" }
## Navigation
androidx-navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "androidx-navigation" }
## Paging
androidx-paging-runtime = { module = "androidx.paging:paging-runtime", version.ref = "androidx-paging" }
androidx-paging-runtime-ktx = { module = "androidx.paging:paging-runtime-ktx", version.ref = "androidx-paging" }
androidx-paging-common = { module = "androidx.paging:paging-common", version.ref = "androidx-paging" }
androidx-paging-compose = { module = "androidx.paging:paging-compose", version.ref = "androidx-paging-compose" }
## Room
androidx-room-ktx = { module = "androidx.room:room-ktx", version.ref = "androidx-room" }
androidx-room-compiler = { module = "androidx.room:room-compiler", version.ref = "androidx-room" }
androidx-room-test = { module = "androidx.room:room-testing", version.ref = "androidx-room" }
androidx-room-paging = { module = "androidx.room:room-paging", version.ref = "androidx-room" }
## Webkit
androidx-webkit = { module = "androidx.webkit:webkit", version.ref = "androidx-webkit" }
## Window
androidx-window = { module = "androidx.window:window", version.ref = "androidx-window" }
## Work
androidx-work-runtime-ktx = { module = "androidx.work:work-runtime-ktx", version.ref = "androidx-work" }

# Coil
coil-compose = { module = "io.coil-kt:coil-compose", version.ref = "coil" }
coil-gif = { module = "io.coil-kt:coil-gif", version.ref = "coil" }
coil-svg = { module = "io.coil-kt:coil-svg", version.ref = "coil" }
coil-video = { module = "io.coil-kt:coil-video", version.ref = "coil" }

# Core
core-account = { module = "me.proton.core:account", version.ref = "core" }
core-account-dagger = { module = "me.proton.core:account-dagger", version.ref = "core" }
core-account-data = { module = "me.proton.core:account-data", version.ref = "core" }
core-account-domain = { module = "me.proton.core:account-domain", version.ref = "core" }
core-accountManager = { module = "me.proton.core:account-manager", version.ref = "core" }
core-accountManager-dagger = { module = "me.proton.core:account-manager-dagger", version.ref = "core" }
core-accountManager-data = { module = "me.proton.core:account-manager-data", version.ref = "core" }
core-accountManager-domain = { module = "me.proton.core:account-manager-domain", version.ref = "core" }
core-accountManager-presentation = { module = "me.proton.core:account-manager-presentation", version.ref = "core" }
core-accountManager-test = { module = "me.proton.core:account-manager-test", version.ref = "core" }
core-accountRecovery = { module = "me.proton.core:account-recovery", version.ref = "core" }
core-accountRecovery-dagger = { module = "me.proton.core:account-recovery-dagger", version.ref = "core" }
core-accountRecovery-test = { module = "me.proton.core:account-recovery-test", version.ref = "core" }
core-auth = { module = "me.proton.core:auth", version.ref = "core" }
core-auth-domain = { module = "me.proton.core:auth-domain", version.ref = "core" }
core-auth-fido = { module = "me.proton.core:auth-fido", version.ref = "core" }
core-auth-test = { module = "me.proton.core:auth-test", version.ref = "core" }
core-biometric = { module = "me.proton.core:biometric", version.ref = "core" }
core-challenge = { module = "me.proton.core:challenge", version.ref = "core" }
core-challenge-data = { module = "me.proton.core:challenge-data", version.ref = "core" }
core-contact = { module = "me.proton.core:contact", version.ref = "core" }
core-contact-data = { module = "me.proton.core:contact", version.ref = "core" }
core-contact-domain = { module = "me.proton.core:contact", version.ref = "core" }
core-country = { module = "me.proton.core:country", version.ref = "core" }
core-crypto = { module = "me.proton.core:crypto", version.ref = "core" }
core-crypto-dagger = { module = "me.proton.core:crypto-dagger", version.ref = "core" }
core-crypto-android = { module = "me.proton.core:crypto-android", version.ref = "core" }
core-cryptoCommon = { module = "me.proton.core:crypto-common", version.ref = "core" }
core-cryptoValidator = { module = "me.proton.core:crypto-validator", version.ref = "core" }
core-data = { module = "me.proton.core:data", version.ref = "core" }
core-dataRoom = { module = "me.proton.core:data-room", version.ref = "core" }
core-deviceMigration = { module = "me.proton.core:device-migration", version.ref = "core" }
core-domain = { module = "me.proton.core:domain", version.ref = "core" }
core-eventManager = { module = "me.proton.core:event-manager", version.ref = "core" }
core-eventManager-dagger = { module = "me.proton.core:event-manager-dagger", version.ref = "core" }
core-eventManager-data = { module = "me.proton.core:event-manager-data", version.ref = "core" }
core-eventManager-domain = { module = "me.proton.core:event-manager-domain", version.ref = "core" }
core-featureFlag = { module = "me.proton.core:feature-flag", version.ref = "core" }
core-featureFlag-dagger = { module = "me.proton.core:feature-flag-dagger", version.ref = "core" }
core-featureFlag-data = { module = "me.proton.core:feature-flag-data", version.ref = "core" }
core-featureFlag-domain = { module = "me.proton.core:feature-flag-domain", version.ref = "core" }
core-humanVerification = { module = "me.proton.core:human-verification", version.ref = "core" }
core-humanVerification-domain = { module = "me.proton.core:human-verification-domain", version.ref = "core" }
core-humanVerification-data = { module = "me.proton.core:human-verification-data", version.ref = "core" }
core-humanVerification-test = { module = "me.proton.core:human-verification-test", version.ref = "core" }
core-key = { module = "me.proton.core:key", version.ref = "core" }
core-key-dagger = { module = "me.proton.core:key-dagger", version.ref = "core" }
core-key-data = { module = "me.proton.core:key-data", version.ref = "core" }
core-keyTransparency = { module = "me.proton.core:key-transparency", version.ref = "core" }
core-keyTransparency-data = { module = "me.proton.core:key-transparency-data", version.ref = "core" }
core-key-domain = { module = "me.proton.core:key-domain", version.ref = "core" }
core-label = { module = "me.proton.core:label", version.ref = "core" }
core-label-data = { module = "me.proton.core:label-data", version.ref = "core" }
core-label-domain = { module = "me.proton.core:label-domain", version.ref = "core" }
core-network = { module = "me.proton.core:network", version.ref = "core" }
core-network-data = { module = "me.proton.core:network-data", version.ref = "core" }
core-network-domain = { module = "me.proton.core:network-domain", version.ref = "core" }
core-network-presentation = { module = "me.proton.core:network-presentation", version.ref = "core" }
core-notification = { module = "me.proton.core:notification", version.ref = "core" }
core-notification-data = { module = "me.proton.core:notification-data", version.ref = "core" }
core-observability = { module = "me.proton.core:observability", version.ref = "core" }
core-observability-dagger = { module = "me.proton.core:observability-dagger", version.ref = "core" }
core-observability-data = { module = "me.proton.core:observability-data", version.ref = "core" }
core-observability-domain = { module = "me.proton.core:observability-domain", version.ref = "core" }
core-observability-tools = { module = "me.proton.core:observability-tools", version.ref = "core" }
core-passValidator = { module = "me.proton.core:pass-validator", version.ref = "core" }
core-payment = { module = "me.proton.core:payment", version.ref = "core" }
core-payment-domain = { module = "me.proton.core:payment-domain", version.ref = "core" }
core-payment-data = { module = "me.proton.core:payment-data", version.ref = "core" }
core-payment-iap = { module = "me.proton.core:payment-iap", version.ref = "core" }
# core-payment-iap-test = { module = "me.proton.core:payment-iap-test", version.ref = "core" }
core-plan = { module = "me.proton.core:plan", version.ref = "core" }
core-plan-presentation-compose = { module = "me.proton.core:plan-presentation-compose", version.ref = "core" }
core-plan-test = { module = "me.proton.core:plan-test", version.ref = "core" }
core-presentation = { module = "me.proton.core:presentation", version.ref = "core" }
core-presentation-compose = { module = "me.proton.core:presentation-compose", version.ref = "core" }
core-proguard-rules = { module = "me.proton.core:proguard-rules", version.ref = "core" }
core-push = { module = "me.proton.core:push", version.ref = "core" }
core-push-data = { module = "me.proton.core:push-data", version.ref = "core" }
core-report = { module = "me.proton.core:report", version.ref = "core" }
core-report-domain = { module = "me.proton.core:report-domain", version.ref = "core" }
core-report-test = { module = "me.proton.core:report-test", version.ref = "core" }
core-test-android = { module = "me.proton.core:test-android", version.ref = "core" }
core-test-android-instrumented = { module = "me.proton.core:test-android-instrumented", version.ref = "core" }
core-test-kotlin = { module = "me.proton.core:test-kotlin", version.ref = "core" }
core-test-quark = { module = "me.proton.core:test-quark", version.ref = "core-test-quark" }
core-test-android-test-rule = { module = "me.proton.core:test-rule", version.ref = "core" }
core-telemetry = { module = "me.proton.core:telemetry", version.ref = "core" }
core-telemetry-domain = { module = "me.proton.core:telemetry-domain", version.ref = "core" }
core-telemetry-data = { module = "me.proton.core:telemetry-data", version.ref = "core" }
core-user = { module = "me.proton.core:user", version.ref = "core" }
core-user-dagger = { module = "me.proton.core:user-dagger", version.ref = "core" }
core-user-data = { module = "me.proton.core:user-data", version.ref = "core" }
core-user-domain = { module = "me.proton.core:user-domain", version.ref = "core" }
core-userRecovery = { module = "me.proton.core:user-recovery", version.ref = "core" }
core-userRecovery-dagger = { module = "me.proton.core:user-recovery-dagger", version.ref = "core" }
core-userRecovery-data = { module = "me.proton.core:user-recovery-data", version.ref = "core" }
core-userRecovery-domain = { module = "me.proton.core:user-recovery-domain", version.ref = "core" }
core-userSettings = { module = "me.proton.core:user-settings", version.ref = "core" }
core-userSettings-dagger = { module = "me.proton.core:user-settings-dagger", version.ref = "core" }
core-userSettings-data = { module = "me.proton.core:user-settings-data", version.ref = "core" }
core-userSettings-domain = { module = "me.proton.core:user-settings-domain", version.ref = "core" }
core-userSettings-test = { module = "me.proton.core:user-settings-test", version.ref = "core" }
core-utilAndroidDatetime = { module = "me.proton.core:util-android-datetime", version.ref = "core" }
core-utilAndroidDagger = { module = "me.proton.core:util-android-dagger", version.ref = "core" }
core-utilAndroidSentry = { module = "me.proton.core:util-android-sentry", version.ref = "core" }
core-utilKotlin = { module = "me.proton.core:util-kotlin", version.ref = "core" }
core-config-data = { module = "me.proton.core:configuration-data", version.ref = "core" }
core-config-dagger-staticDefaults = { module = "me.proton.core:configuration-dagger-staticdefaults", version.ref = "core" }
core-config-dagger-contentResolver = { module = "me.proton.core:configuration-dagger-content-resolver", version.ref = "core" }

# Dagger
dagger-hilt-android = { module = "com.google.dagger:hilt-android", version.ref = "dagger" }
dagger-hilt-android-testing = { module = "com.google.dagger:hilt-android-testing", version.ref = "dagger" }
dagger-hilt-android-compiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "dagger" }
dagger-hilt-compiler = { module = "com.google.dagger:hilt-compiler", version.ref = "dagger" }

#Github
treessence = { module = "com.github.bastienpaulfr:treessence", version.ref = "treessence" }

# JakeWharton
timber = { module = "com.jakewharton.timber:timber", version.ref = "timber" }

# Desugar
tools-desugar = { module = "com.android.tools:desugar_jdk_libs", version.ref = "desugar" }

# Kotlin
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }

# Kotlinx
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serializationJson" }

# Lottie
lottie-compose = { module = "com.airbnb.android:lottie-compose", version.ref = "lottie" }

# Material
material = { module = "com.google.android.material:material", version.ref = "material" }

# Sentry
sentry = { module = "io.sentry:sentry-android", version.ref = "sentry" }

# Showkase
showkase = { module = "com.airbnb.android:showkase", version.ref = "showkase" }
showkaseProcessor = { module = "com.airbnb.android:showkase-processor", version.ref = "showkase" }

# Squareup
leakCanary = { module = "com.squareup.leakcanary:leakcanary-android", version.ref = "leakCanary" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttpLoggingInterceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttp" }
plumber = { module = "com.squareup.leakcanary:plumber-android", version.ref = "leakCanary" }
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }

# Test
androidx-test-core-ktx = { module = "androidx.test:core-ktx", version.ref = "androidx-test" }
androidx-test-runner = { module = "androidx.test:runner", version.ref = "androidx-test" }
androidx-test-rules = { module = "androidx.test:rules", version.ref = "androidx-test" }
androidx-test-uiautomator = { module = "androidx.test.uiautomator:uiautomator", version.ref = "androidx-test-uiautomator" }
androidx-test-services = { module = "androidx.test.services:test-services", version.ref = "androidx-test-util" }
androidx-test-espresso-contrib = { module = "androidx.test.espresso:espresso-contrib", version.ref = "espresso-contrib"}
androidx-test-orchestrator = { module = "androidx.test:orchestrator", version.ref = "androidx-test-orchestrator"}
androidx-compose-ui-test = { module = "androidx.compose.ui:ui-test", version.ref = "androidx-compose" }
androidx-compose-ui-test-junit = { module = "androidx.compose.ui:ui-test-junit4", version.ref = "androidx-compose" }
androidx-work-testing = { module = "androidx.work:work-testing", version.ref = "androidx-work" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
junit = { module = "junit:junit", version.ref = "junit" }
mockk-jvm = { module = "io.mockk:mockk", version.ref = "mockk" }
mockk-android = { module = "io.mockk:mockk-android", version.ref = "mockk" }
mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "mockwebserver" }
robolectric = { module = "org.robolectric:robolectric", version.ref = "robolectric"}
fusion = { module = "me.proton.test:fusion", version.ref = "fusion"}
testParameterInjector = { module = "com.google.testparameterinjector:test-parameter-injector", version.ref = "testParameterInjector" }

[bundles]
accompanist = ["accompanist-systemUiController", "accompanist-permissions", "accompanist-drawablepainter", "accompanist-placeholderMaterial"]
core = ["core-account", "core-accountManager", "core-accountRecovery", "core-auth", "core-auth-fido", "core-biometric", "core-challenge", "core-contact", "core-country", "core-crypto", "core-cryptoValidator", "core-data", "core-dataRoom", "core-deviceMigration", "core-domain", "core-eventManager", "core-featureFlag", "core-humanVerification", "core-key", "core-keyTransparency", "core-label", "core-network", "core-notification", "core-observability", "core-passValidator", "core-payment", "core-payment-iap", "core-plan", "core-plan-presentation-compose", "core-report", "core-presentation", "core-presentation-compose", "core-proguard-rules", "core-push", "core-telemetry", "core-user", "core-userSettings", "core-utilAndroidDagger", "core-utilAndroidSentry", "core-utilKotlin", "core-config-data", "core-userRecovery"]
core-test = ["core-accountManager-test", "core-auth-test", "core-accountRecovery-test", "core-humanVerification-test", "core-report-test", "core-plan-test", "core-userSettings-test"]
test-android = ["junit", "mockk-android", "coroutines-test", "androidx-test-core-ktx", "androidx-test-runner", "androidx-test-rules", "androidx-compose-ui-test", "androidx-compose-ui-test-junit", "androidx-test-uiautomator", "core-test-android-instrumented"]
test-jvm = ["junit", "mockk-jvm", "coroutines-test", "androidx-test-core-ktx", "androidx-work-testing", "core-test-kotlin", "core-test-quark", "robolectric", "mockwebserver"]

[plugins]
proton-detekt = { id = "me.proton.core.gradle-plugins.detekt", version.ref = "proton-detekt-plugin" }
paparazzi = { id = "app.cash.paparazzi", version.ref = "paparazzi-gradle-plugin" }
